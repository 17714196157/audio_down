# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/
daemon off;
# user nginx;
worker_processes auto;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
# include /usr/share/nginx/modules/*.conf;

events {
    use epoll;
    worker_connections 65536;
    accept_mutex off;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$upstream_addr" "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$request_time"';
    error_log   /home/log_sellbot/nginx/nginx-error.log;
    access_log  /home/log_sellbot/nginx/nginx-access.log main;
    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   900;
    # keepalive_timeout   0;
    keepalive_requests  100;
    types_hash_max_size 2048;

    # include             /etc/nginx/mime.types;
    # default_type        application/octet-stream;

    # include /etc/nginx/conf.d/*.conf;
    upstream tts_control {
        server 127.0.0.1:9301;
        server 127.0.0.1:9302;
        server 127.0.0.1:9303;
        server 127.0.0.1:9304;
    }

    upstream tts_service {
        server 127.0.0.1:9101;
        server 127.0.0.1:9102;
        server 127.0.0.1:9103;
        server 127.0.0.1:9104;
        server 127.0.0.1:9105;
        server 127.0.0.1:9106;
        server 127.0.0.1:9107;
        server 127.0.0.1:9108;
        server 127.0.0.1:9109;
        server 127.0.0.1:9110;
    }

    server {
        # allow 99.48.58.15; # allow a remote host
        # deny all; # deny everyone else
        error_log   /home/log_sellbot/nginx/nginx-error.log;
        access_log  /home/log_sellbot/nginx/nginx-access.log main;
        listen       0.0.0.0:8089;
        server_name  tts_service;
        location /tts/control {
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Scheme $scheme;
                proxy_redirect off;
                proxy_pass http://tts_control;
                proxy_send_timeout 300;
                proxy_connect_timeout 300;
                proxy_read_timeout 300;
            }
    }

    #limit_conn_zone $binary_remote_addr zone=perip:10m;

    server {
        listen       10001;
        server_name  download;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        #limit_conn perip 1;

        location / {
            root   /usr/local/src/download;
            #index  index.html index.htm;
            if ($request_filename ~* ^.*?\.(txt|doc|pdf|rar|gz|zip|docx|exe|xlsx|ppt|pptx)$){
               add_header Content-Disposition: 'attachment;';
            }
                limit_rate_after 1m;
                limit_rate 200k;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    server {
        # allow 99.48.58.15; # allow a remote host
        # deny all; # deny everyone else
        error_log   /home/log_sellbot/nginx/nginx-error.log;
        access_log  /home/log_sellbot/nginx/nginx-access.log main;
        listen       0.0.0.0:9000;
        server_name  tts_service;
        location /synthesize {
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Scheme $scheme;
                proxy_redirect off;
                proxy_pass http://tts_service;
                proxy_send_timeout 300;
                proxy_connect_timeout 300;
                proxy_read_timeout 300;
            }
    }

}
